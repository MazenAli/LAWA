FLENS_DEFAULT_INDEXTYPE *abscissa_level_open_nd ( FLENS_DEFAULT_INDEXTYPE level_max, FLENS_DEFAULT_INDEXTYPE dim_num, FLENS_DEFAULT_INDEXTYPE test_num, FLENS_DEFAULT_INDEXTYPE test_val[] );
void comp_next ( FLENS_DEFAULT_INDEXTYPE n, FLENS_DEFAULT_INDEXTYPE k, FLENS_DEFAULT_INDEXTYPE a[], bool *more, FLENS_DEFAULT_INDEXTYPE *h, FLENS_DEFAULT_INDEXTYPE *t );
double f2_abscissa ( FLENS_DEFAULT_INDEXTYPE order, FLENS_DEFAULT_INDEXTYPE i );
void gl_abscissa ( FLENS_DEFAULT_INDEXTYPE dim_num, FLENS_DEFAULT_INDEXTYPE point_num, FLENS_DEFAULT_INDEXTYPE grid_index[], 
  FLENS_DEFAULT_INDEXTYPE grid_base[], double grid_point[] );
double gp_abscissa ( FLENS_DEFAULT_INDEXTYPE order, FLENS_DEFAULT_INDEXTYPE i );
FLENS_DEFAULT_INDEXTYPE i4_choose ( FLENS_DEFAULT_INDEXTYPE n, FLENS_DEFAULT_INDEXTYPE k );
FLENS_DEFAULT_INDEXTYPE i4_log_2 ( FLENS_DEFAULT_INDEXTYPE i );
FLENS_DEFAULT_INDEXTYPE i4_max ( FLENS_DEFAULT_INDEXTYPE i1, FLENS_DEFAULT_INDEXTYPE i2 );
FLENS_DEFAULT_INDEXTYPE i4_min ( FLENS_DEFAULT_INDEXTYPE i1, FLENS_DEFAULT_INDEXTYPE i2 );
FLENS_DEFAULT_INDEXTYPE i4_modp ( FLENS_DEFAULT_INDEXTYPE i, FLENS_DEFAULT_INDEXTYPE j );
FLENS_DEFAULT_INDEXTYPE i4_power ( FLENS_DEFAULT_INDEXTYPE i, FLENS_DEFAULT_INDEXTYPE j );
//string i4_to_string ( FLENS_DEFAULT_INDEXTYPE i4, string format );
FLENS_DEFAULT_INDEXTYPE i4vec_product ( FLENS_DEFAULT_INDEXTYPE n, FLENS_DEFAULT_INDEXTYPE a[] );
FLENS_DEFAULT_INDEXTYPE index_to_level_open ( FLENS_DEFAULT_INDEXTYPE dim_num, FLENS_DEFAULT_INDEXTYPE t[], FLENS_DEFAULT_INDEXTYPE order, FLENS_DEFAULT_INDEXTYPE level_max );
void level_to_order_open ( FLENS_DEFAULT_INDEXTYPE dim_num, FLENS_DEFAULT_INDEXTYPE level[], FLENS_DEFAULT_INDEXTYPE order[] );
FLENS_DEFAULT_INDEXTYPE *levels_open_index ( FLENS_DEFAULT_INDEXTYPE dim_num, FLENS_DEFAULT_INDEXTYPE level_max, FLENS_DEFAULT_INDEXTYPE point_num );
FLENS_DEFAULT_INDEXTYPE *multigrid_index1 ( FLENS_DEFAULT_INDEXTYPE dim_num, FLENS_DEFAULT_INDEXTYPE order_1d[], FLENS_DEFAULT_INDEXTYPE order_nd );
void multigrid_scale_open ( FLENS_DEFAULT_INDEXTYPE dim_num, FLENS_DEFAULT_INDEXTYPE order_nd, FLENS_DEFAULT_INDEXTYPE level_max, FLENS_DEFAULT_INDEXTYPE level_1d[], FLENS_DEFAULT_INDEXTYPE grid_index[] );
double nco_abscissa ( FLENS_DEFAULT_INDEXTYPE order, FLENS_DEFAULT_INDEXTYPE i );
double r8_epsilon ( );
double r8_huge ( );
//void r8mat_write ( string output_filename, FLENS_DEFAULT_INDEXTYPE m, FLENS_DEFAULT_INDEXTYPE n, double table[] );
FLENS_DEFAULT_INDEXTYPE sparse_grid_f2s_size ( FLENS_DEFAULT_INDEXTYPE dim_num, FLENS_DEFAULT_INDEXTYPE level_max );
FLENS_DEFAULT_INDEXTYPE sparse_grid_gps_size ( FLENS_DEFAULT_INDEXTYPE dim_num, FLENS_DEFAULT_INDEXTYPE level_max );
FLENS_DEFAULT_INDEXTYPE sparse_grid_ofn_size ( FLENS_DEFAULT_INDEXTYPE dim_num, FLENS_DEFAULT_INDEXTYPE level_max );
FLENS_DEFAULT_INDEXTYPE sparse_grid_onn_size ( FLENS_DEFAULT_INDEXTYPE dim_num, FLENS_DEFAULT_INDEXTYPE level_max );
FLENS_DEFAULT_INDEXTYPE sparse_grid_own_size ( FLENS_DEFAULT_INDEXTYPE dim_num, FLENS_DEFAULT_INDEXTYPE level_max );
void timestamp ( );
void vec_colex_next2 ( FLENS_DEFAULT_INDEXTYPE dim_num, FLENS_DEFAULT_INDEXTYPE base[], FLENS_DEFAULT_INDEXTYPE a[], bool *more );

