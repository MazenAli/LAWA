==title:Coding Style==
The following documents the coding style we use in FLENS.  It has evolved
since the beginning of FLENS and was mainly established by Alexander
Stippler and Michael Lehn.  Some of the rules might seem strange but most
of them are there for some good reason.

The main purpose of every coding style is achieving consistency and
expressiveness of the developed code.  Furthermore, it sometimes prevents
us from producing nasty bugs in the middle of the night.  And at least it helps
us to understand each others code.

Our coding style does not conform to the [STL] coding style.  And we do not
want to.  Instead we want clearly want to distinct between functionality
provided by C++ out of the box and functionality given by FLENS used as
an add on.

==section:Spacing and Indentation==

==subsection: No More Than 80 Characters per Line?!?==
Whenever possible, lines are no longer than 80 characters in FLENS. But for LAWA we are a litte 
more relaxed. Since lines can get very long and cannot easily be wrapped without losing convience
when reading, we allow at about 100 characters per line. Whenever easily possible, shorter lines
are preferable.

==subsection:No Tabs, Use Four Spaces==
We do not use tabs but spaces.  In fact, we use <b>four spaces</b>.
==code:.cc==
for (int i=0; i<10; ++i) {
    cout << "For indentation we use 4 spaces." << endl;
}
====
The reason: The code should look the same no matter what editor you use.
And no matter what settings you use with your editor.  For some editors the
default tab size is [4] on others it is [8].  Spaces are spaces. Hence, we
do use spaces.

==subsection:Function Declaration==
Return types get an extra line:
==code:.cc==
int
someFunction(int a);
====
That is because our types get really long.  For example
==code:.cc==
DenseVector<Array<double>, IndexOptions<long,0>, std::allocator<double> >
====
which has already a total of 80 characters.  So in some cases it even might
be better to use more than one line for the return type:
==code:.cc==
DenseVector<Array<double>,
            IndexOptions<long, 0>,
            std::allocator<double> >
dummy();
====
or when using templates
==code:.cc==
template <typename T, typename IndexType>
    DenseVector<Array<T>,
                IndexOptions<IndexType, 0>,
                std::allocator<T> >
    dummy();
====
Another advantage you can [grep] your source files for function names.

==subsection:Template Function Declaration==
Like non-templated functions. But one line for the declaration of template
parameters.  The remaining of the declaration gets indented the usual four
spaces:
==code:.cc==
template <typename Integer>
    Integer
    someFunction(Integer a);
====
If the template list does not fit within the 80 characters (or if it would not
look good) we split:
==code:.cc==
template <typename T, StorageOrder Order,
          typename I = IndexOptions<long>,
          typename A = std::allocator<T> >
    const T *
    someOtherFunction(const Array<T, I, A> &array);
====
In general: one line for template list, return type, ... always means at least
one line.

==subsection:(Templated) Function Definition==
As for the declaration: One line for the template list, one line for the
return type, one line for the function name and its parameters.  Then, one
line for the curly open bracket, then the function body and finally one line
for the closing curly bracket:
==code:.cc==
template <typename FS_A, typename FS_B>
void
myCopy(const FS_A &A, FS_B &B)
{
    // function body
}
====

==section:Naming Conventions==

==subsection: Names==
In general we compose names without underscores.  Instead an uppercase letter
indicates that a name was glues together:
==code:.cc==
int numRows;   // ok
int num_cols;  // NO
int num_Rows;  // NO

// ok:
int
getNumRows(const SomeMatrix &A)
{
    // ...
}
====

==subsection:Variable Names with First Letter Lower Case==
Variable names begin with lowercase letters.
==code:.cc==
int numRows; // ok
int NumRows; // NO
====

==subsection:Private Variables (Private Attributes)==
Private variable in a class names begin with lowercase letters and are prefixed
with an underscore.
==code:.cc==
class SomeClass {
    public:
        // ...
        int numRows;    // ok
    private:
        int _length;    // ok
        int numCols;    // NO
}
====
This prevents name conflicts in the constructor:
==code:.cc==
SomeClass::SomeClass(int length)
    : _length(length)
{

}
====

==subsection:Type Names with First Letter Upper Case==
Type names and in particular classes and structs begin with an upper case letter.
==code:.cc==
class MyMatrix; // ok
class myMatrix; // NO
====

==section:Organization of Code==

==subsection:No Implementation in Header Files==
Header files only declare things and never implement anything.  No matter how
small and simple an implementation of a function or methods might be it does
not belong in a header file.

==subsection:Header File Skeleton==
A header file looks like this:
==code:.cc==
/*
    Copyright ...
*/

#ifndef SOME_INCLUDE_GUARD
#define SOME_INCLUDE_GUARD 1

// your declarations

#endif // SOME_INCLUDE_GUARD
====

==subsection:Implementation of Template Classes==
If you have a class with template parameters its declared in a file with
ending [.h].  Let us say [myclass.h].  Then its implementation is located
in a file with ending [.tcc].  So in this case [myclass.tcc].  The
implementation gets included at the end of the header file.

Let this be the header file
==code:.cc==
/*
    Your Copyright
*/

#ifndef PATH_TO_YOUR_HEADER_MYCLASS_H
#define PATH_TO_YOUR_HEADER_MYCLASS_H 1

template <typename T>
class MyClass
{
    // declare your methods, ...
    int
    dummy();
};

#include <path/to/your/header/myclass.tcc>
#endif // PATH_TO_YOUR_HEADER_MYCLASS_H
====
And this is the corresponding implementation in [path/to/your/header/myclass.tcc]:
==code:.cc==
template <typename T>
int
MyClass::dummy()
{
    // your implementation
}
====

==subsection:Include Guards==
Include guards contain the relative path to the header file followed by the
name of the header file.  The include guard is in upper case only.  Slashes
and dots become underscores.  For example, the include guard of header file
[flens/storage/array/constarrayview.h] is [FLENS_STORAGE_ARRAY_CONSTARRAYVIEW_H].

==subsection:One File per Class & Filename is Class Name==
No matter how simple, each class deserves its own file.  That means its own
header and implementation file.

==section:Expressive Programming==


==subsection:Using ++i vs. i++==
If [++i] and [i++] would have the same effect we always use the pre-increment:
==code:.cc==
// NO:
for (int i=0; i<10; i++) {
    // do something
}

// YES:
for (int i=0; i<10; ++i) {
    // do something
}
====
We only use the post-increment [i++] if there is a good reason do do so.  For
instance, if it makes something faster or more readable.

==subsection: Comments are Evil==
Comments are not evil.  But do not miss-use comment for completely
documenting your code.  Document your algorithm somewhere (maybe you already
published a paper about it anyway).  Leave a reference to this document.
Assume that each person browsing your code has read your documentation first.
Inside the function use at most a few comments like [Step 1] and [Step 2] in
the following example:
==code:.cc==
// see http://mycrazyalgorithm.com/dummy
void
dummy()
{
    // Step 1:
    /* ...  some fancy code doing things documented above ... */

    // Step 2:
    /* ...  some fancy code doing things documented above ... */
}
====